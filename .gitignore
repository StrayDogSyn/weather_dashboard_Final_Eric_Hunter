# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files

# Weather Dashboard Application Specific
# =====================================

# Environment and Configuration
.env.local
.env.production
.env.development
config/local_settings.py
config/production_settings.py

# Database files
*.db
*.sqlite
*.sqlite3
data/*.db
data/*.sqlite
data/*.sqlite3
weather_dashboard.db
weather_data.db

# Log files
logs/
*.log
*.log.*
app.log
weather.log
error.log
debug.log
application.log

# API Keys and Secrets
api_keys.json
secrets.json
credentials.json
.secrets
.api_keys
.env
.env.*
!.env.example

# Weather data cache
cache/
weather_cache/
*.cache
temp_data/
__pycache__/
*.pyc
*.pyo
*.pyd

# Screenshots and generated images
assets/screenshots/
screenshots/
*.png
*.jpg
*.jpeg
*.gif
*.bmp
*.tiff
*.webp
# Keep specific project images
!assets/images/Hunter.png
!assets/images/HunterGlass.png
!assets/images/Phase3C.png
!assets/images/ProtoMain.png
!assets/images/TTKBootstrap.png
!README_images/
!docs/images/

# Audio files (except samples)
assets/sounds/*.mp3
assets/sounds/*.wav
assets/sounds/*.ogg
assets/sounds/*.flac
!assets/sounds/sample*

# Backup files
*.bak
*.backup
*.old
*.orig
*.save
*~

# Temporary files
temp/
tmp/
*.tmp
*.temp
.temp/

# IDE and Editor specific
.vscode/
!.vscode/settings.json.example
.idea/
*.swp
*.swo
*.sublime-project
*.sublime-workspace
.atom/

# OS specific
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini
$RECYCLE.BIN/

# Application runtime
pid.txt
*.pid
app.pid
server.pid

# User data and preferences
user_data/
preferences.json
user_settings.json
settings.local.json

# Third-party service configs
spotify_cache/
github_cache/
gemini_cache/
api_cache/

# Development and testing
test_data/
test_results/
.coverage_html/
.pytest_cache/
.tox/
.nox/
htmlcov/
.coverage
.coverage.*

# Documentation builds
docs/build/
docs/_build/
site/

# Package builds
build/
dist/
*.egg-info/
.eggs/

# Virtual environments (additional patterns)
.conda/
conda-meta/
.python-version
venv*/
env*/
.venv*/
.env*/

# Jupyter notebooks
.ipynb_checkpoints/
*.ipynb

# Local development
local/
dev/
development/
local_config/

# Performance and profiling
*.prof
*.profile
profile_results/
.profiling/

# Security
*.pem
*.key
*.crt
*.p12
*.pfx
*.keystore
*.jks

# AI/ML specific
.cursorignore
.cursorindexingignore
.cursor/
.claude/
.trae/

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Node.js (if any frontend components)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Archive files
*.zip
*.tar
*.tar.gz
*.rar
*.7z

# Large files that shouldn't be in git
*.iso
*.dmg
*.img
*.bin
